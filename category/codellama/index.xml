<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CodeLlama | Jiwen Jiang</title>
    <link>https://jiwenj.github.io/category/codellama/</link>
      <atom:link href="https://jiwenj.github.io/category/codellama/index.xml" rel="self" type="application/rss+xml" />
    <description>CodeLlama</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Sat, 14 Oct 2023 21:10:00 +0700</lastBuildDate>
    <image>
      <url>https://jiwenj.github.io/media/icon_hu7ee7877cac8e8b3a44b2d944c7dd79b2_197985_512x512_fill_lanczos_center_3.png</url>
      <title>CodeLlama</title>
      <link>https://jiwenj.github.io/category/codellama/</link>
    </image>
    
    <item>
      <title>LLMs for Code (Progressing)</title>
      <link>https://jiwenj.github.io/blog/llm4code/</link>
      <pubDate>Sat, 14 Oct 2023 21:10:00 +0700</pubDate>
      <guid>https://jiwenj.github.io/blog/llm4code/</guid>
      <description>&lt;p&gt;&lt;para&gt;Large Language Models for Code are flourishing. New and powerful models are released on a weekly basis, demonstrating remarkable performance on the code generation task. In this article, I curate some SOTA models and try to figure out their machanism. Here is the content of table:&lt;/para&gt;&lt;/p&gt;
&lt;!-- https://analyticsindiamag.com/metas-code-llama-is-here-but-unnaturally/ --&gt;
&lt;hr&gt;
&lt;para&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Contents&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Datasets
&lt;ul&gt;
&lt;li&gt;HumanEval&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Models
&lt;ul&gt;
&lt;li&gt;CodeLlama&lt;/li&gt;
&lt;li&gt;Phind&lt;/li&gt;
&lt;li&gt;CodeGeex&lt;/li&gt;
&lt;li&gt;Codeium&lt;/li&gt;
&lt;li&gt;WizardCode&lt;/li&gt;
&lt;li&gt;phi-1&lt;/li&gt;
&lt;li&gt;CodeFuse&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/para&gt;
&lt;hr&gt;
&lt;h3 id=&#34;humaneval&#34;&gt;HumanEval&lt;/h3&gt;
&lt;p&gt;&lt;para&gt;This is an evaluation harness for the HumanEval problem solving dataset described in the paper &lt;a href=&#34;https://arxiv.org/pdf/2107.03374.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&amp;ldquo;Evaluating Large Language Models Trained on Code&amp;rdquo;&lt;/a&gt;. It used to measure functional correctness for synthesizing programs from docstrings. It consists of 164 original programming problems, assessing language comprehension, algorithms, and simple mathematics, with some comparable to simple software interview questions. At the same time, you can find the latest models and advancements in &lt;a href=&#34;https://paperswithcode.com/sota/code-generation-on-humaneval&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PapersWithCode&lt;/a&gt;.&lt;/para&gt;
















&lt;figure  id=&#34;figure-an-example-the-white-space-is-the-prompt-or-input-while-the-yellow-space-is-the-model-generated-content&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./1.jpg&#34; alt=&#34;example&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      An example: the white space is the prompt or input while the yellow space is the model-generated content
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;codellama&#34;&gt;CodeLlama&lt;/h3&gt;
&lt;p&gt;&lt;para&gt;Maybe you haven&amp;rsquo;t excperienced CodeLlama yet, the Huggingface official group has deployed a &lt;a href=&#34;https://huggingface.co/chat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;playground&lt;/a&gt; for everyone where you can Preliminarily evaluate it in your target task.&lt;/para&gt;&lt;/p&gt;
&lt;p&gt;&lt;para&gt;After you have seen its performance on your task and gain much confidence in CodeLlama, you might want to give it a shot where you can delve deeper into the paper, even deploy and finetune it. The model weights are available in &lt;a href=&#34;https://huggingface.co/codellama&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Huggingface&lt;/a&gt;. If you go through the &lt;a href=&#34;https://arxiv.org/pdf/2308.12950v2.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;paper&lt;/a&gt;, you might find a really distinct model named &amp;ldquo;&lt;strong&gt;unnatural CodeLlama&lt;/strong&gt;&amp;rdquo; whose performance is nearly the same as GPT-4 under the code scenario.&lt;/para&gt;&lt;/p&gt;
&lt;h5 id=&#34;what-is-unnatural-instruction&#34;&gt;What is unnatural instruction&lt;/h5&gt;
&lt;p&gt;&lt;para&gt;In December 2022, Meta AI with Tel Aviv University published the paper named &lt;a href=&#34;https://arxiv.org/pdf/2212.09689.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Unnatural Instructions: Tuning Language Models with (Almost) No Human Labor&lt;/a&gt;. The paper talks about how Meta created a large dataset of creative and diverse instructions and collected 64,000 examples by prompting a language model. This was then further prompted to create a total of 240,000 examples on inputs and outputs, which contained only a little amount of noise. Unnatural Instructions is a dataset of instructions automatically generated by a Large Language model.&lt;/para&gt;&lt;/p&gt;
&lt;p&gt;&lt;para&gt;An example of &lt;a href=&#34;https://github.com/orhonovich/unnatural-instructions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;dataset&lt;/a&gt;:&lt;/para&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#39;instruction&amp;#39;: &amp;#39;You will be given a series of words. Output these words in reverse order, with each word on its own line.&amp;#39;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#39;instances&amp;#39;:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  [{
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;#39;instruction_with_input&amp;#39;: &amp;#34;You will be given a series of words. Output these words in reverse order, with each word on its own line.\nWords: [&amp;#39;Hello&amp;#39;, &amp;#39;world&amp;#39;].&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;#39;input&amp;#39;: &amp;#34;Words: [&amp;#39;Hello&amp;#39;, &amp;#39;world&amp;#39;].&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;#39;constraints&amp;#39;: &amp;#39;None.&amp;#39;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;#39;output&amp;#39;: &amp;#39;world\nHello&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  }]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;codeium&#34;&gt;Codeium&lt;/h3&gt;
&lt;h3 id=&#34;codegeex2&#34;&gt;CodeGeeX2&lt;/h3&gt;
&lt;p&gt;&lt;para/&gt;CodeGeeX2 是多语言代码生成模型 CodeGeeX (KDD’23) 的第二代模型。不同于一代 CodeGeeX（完全在国产华为昇腾芯片平台训练） ，CodeGeeX2 是基于 ChatGLM2 架构加入代码预训练实现，得益于 ChatGLM2 的更优性能，CodeGeeX2 在多项指标上取得性能提升（+107% &amp;gt; CodeGeeX；仅60亿参数即超过150亿参数的 StarCoder-15B 近10%）&lt;/p&gt;
&lt;h3 id=&#34;wizardcode&#34;&gt;WizardCode&lt;/h3&gt;
&lt;p&gt;&lt;para/&gt;Code Large Language Models (Code LLMs), such as StarCoder, have demonstrated exceptional performance in code-related tasks. However, most existing models are solely pre-trained on extensive raw code data without instruction fine-tuning. In this paper, we introduce WizardCoder, which empowers Code LLMs with complex instruction fine-tuning, by adapting the Evol-Instruct method to the domain of code. Through comprehensive experiments on four prominent code generation benchmarks, namely HumanEval, HumanEval+, MBPP, and DS-1000, we unveil the exceptional capabilities of our model. It surpasses all other open-source Code LLMs by a substantial margin. Moreover, our model even outperforms the largest closed LLMs, Anthropic&amp;rsquo;s Claude and Google&amp;rsquo;s Bard, on HumanEval and HumanEval+.&lt;/p&gt;
&lt;h3 id=&#34;phi-1&#34;&gt;phi-1&lt;/h3&gt;
&lt;p&gt;&lt;para&gt;phi-1 is proposed by teams of Microsoft in the &lt;a href=&#34;https://arxiv.org/pdf/2306.11644v2.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&amp;quot;&lt;em&gt;Textbooks Are All You Need&lt;/em&gt;&amp;quot;&lt;/a&gt;. phi-1 is a Transformer-based model with 1.3B parameters, trained for 4 days on 8 A100s, using a selection of &amp;ldquo;textbook quality&amp;rdquo; data from the web (6B tokens) and synthetically generated textbooks and exercises with GPT-3.5 (1B tokens). Despite this small scale, phi-1 attains pass@1 accuracy 50.6% on HumanEval and 55.5% on MBPP. It also displays surprising emergent properties compared to phi-1-base, our model before our finetuning stage on a dataset of coding exercises, and phi-1-small, a smaller model with 350M parameters trained with the same pipeline as phi-1 that still achieves 45% on HumanEval.
&lt;/para&gt;&lt;/p&gt;
&lt;h3 id=&#34;phind&#34;&gt;Phind&lt;/h3&gt;
&lt;p&gt;&lt;para/&gt;&lt;a href=&#34;https://www.phind.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Phind&lt;/a&gt; is an intelligent search engine and assistant for programmers. With Phind, you&amp;rsquo;ll get the answer you&amp;rsquo;re looking for in seconds instead of hours. It will guide you step-by-step from that idea in your head to a working app. Phind is smart enough to proactively ask you questions to clarify its assumptions and to browse the web (or your codebase) when it needs additional context. With their new VS Code extension, you can now get Phind&amp;rsquo;s help right in your editor.&lt;/p&gt;
&lt;p&gt;&lt;para/&gt;August 28th Update: They&amp;rsquo;ve trained a new model, Phind-CodeLlama-34B-v2, that achieves 73.8% pass@1 on HumanEval. See the &lt;a href=&#34;https://www.phind.com/blog/code-llama-beats-gpt4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;blog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;para/&gt;They have released all models on &lt;a href=&#34;https://huggingface.co/Phind&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Huggingface&lt;/a&gt; to bolster the open-source community.&lt;/p&gt;
&lt;h3 id=&#34;vscode-plugin-with-llms&#34;&gt;Vscode Plugin with LLMs&lt;/h3&gt;
&lt;p&gt;&lt;para&gt;We have mentioned above that most of the models are incorporated into the plugin for the convenience in coding procedure. In order to find out the mechanism, we take CodeGeex as an example. First we install the CodeGeex plugin and log in, then we can use &lt;code&gt;developer tool (ctl+shift+I)&lt;/code&gt; to ananlyze the network and console output.
We further go to the directory &lt;code&gt;&#39;~/.vscode/aminer.codegeex-2.1.3&#39;&lt;/code&gt; where exists the source code of the plugin and find the post method in line42-64 of &lt;code&gt;&#39;~/.vscode/extensions/aminer.codegeex-2.1.3/out/utils/getCodeCompletions.js&#39;&lt;/code&gt;. Besides, with seamless effort we can obtain the api url: &lt;code&gt;&#39;https://tianqi.aminer.cn/api/v2/multilingual_code_generate_adapt&#39;&lt;/code&gt;, which you can try with any frontend tools. So far we can get preliminary thought about the mechanism: Frontend + Api calling, so the keys of user experience are still the &lt;code&gt;&#39;clever&#39;&lt;/code&gt; model and network.&lt;/para&gt;&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;&lt;para&gt;In the conclusion, I will display the performance of these models on HumanEval dataset so that we can clearly and conveniently see their gap in code generation task. Therefore we can choose the right base model for our further research and production.&lt;/para&gt;&lt;/p&gt;
&lt;table align=&#34;center&#34; style=&#34;width:100%;border: solid;border-width:2px 0&#34;&gt;
&lt;caption&gt;Table 1: Comparable results on code generation task&lt;/caption&gt;
&lt;thead style=&#34;border-bottom:#000 2px solid;&#34;&gt;
&lt;tr&gt;
&lt;th style=&#34;border:0&#34;&gt;Model&lt;/th&gt;
&lt;td style=&#34;border:0&#34;&gt;Size&lt;/td&gt;
&lt;td style=&#34;border:0&#34;&gt;Open source&lt;/td&gt;
&lt;td style=&#34;border:0&#34;&gt;Techniques&lt;/td&gt;
&lt;td style=&#34;border:0&#34;&gt;Pass@1&lt;/td&gt;
&lt;td style=&#34;border:0&#34;&gt;Pass@10&lt;/td&gt;
&lt;td style=&#34;border:0&#34;&gt;Pass@100&lt;/td&gt;
&lt;td style=&#34;border:0&#34;&gt;Plugin&lt;/td&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;thead&gt;
&lt;tr &gt;
&lt;th style=&#34;border:0&#34;&gt;CodeLlama&lt;/th&gt;
&lt;td style=&#34;border:0&#34;&gt;M&lt;/td&gt;
&lt;td style=&#34;border:0&#34; &gt;&amp;#10004&lt;/td&gt;
&lt;td style=&#34;border:0&#34; &gt;&amp;#10008&lt;/td&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tr&gt;
&lt;th style=&#34;border:0&#34;&gt;WizardCode&lt;/th&gt;
&lt;td style=&#34;border:0&#34;&gt;F&lt;/td&gt;
&lt;td style=&#34;border:0&#34;&gt;No&lt;/td&gt;
&lt;td style=&#34;border:0&#34;&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th style=&#34;border:0&#34;&gt;Phind&lt;/th&gt;
&lt;td style=&#34;border:0&#34;&gt;M&lt;/td&gt;
&lt;td style=&#34;border:0&#34;&gt;No&lt;/td&gt;
&lt;td style=&#34;border:0&#34;&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th style=&#34;border:0&#34;&gt;Codeium&lt;/th&gt;
&lt;td style=&#34;border:0&#34;&gt;M&lt;/td&gt;
&lt;td style=&#34;border:0&#34;&gt;No&lt;/td&gt;
&lt;td style=&#34;border:0&#34;&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th style=&#34;border:0&#34;&gt;Phi&lt;/th&gt;
&lt;td style=&#34;border:0&#34;&gt;M&lt;/td&gt;
&lt;td style=&#34;border:0&#34;&gt;No&lt;/td&gt;
&lt;td style=&#34;border:0&#34;&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th style=&#34;border:0&#34;&gt;CodeGeex&lt;/th&gt;
&lt;td style=&#34;border:0&#34;&gt;M&lt;/td&gt;
&lt;td style=&#34;border:0&#34;&gt;No&lt;/td&gt;
&lt;td style=&#34;border:0&#34;&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;style&gt;
red { color: red; font-style:italic; font-family:Georgia; font-size:10px; font-weight:normal}
yellow { color: yellow }
para{ color: black; font-style:normal; font-family:Georgia; font-weight:normal}

th,td {
    text-align: center;
    font-family:Georgia
}
&lt;/style&gt;</description>
    </item>
    
  </channel>
</rss>
